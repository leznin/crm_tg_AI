#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–µ–π –≤ OpenRouter.
"""
import asyncio
import json
from sqlalchemy.orm import Session
from app.db.session import get_db
from app.services.settings_service import SettingsService
from app.services.openrouter_service import OpenRouterModelManager
from app.schemas.settings_schema import KeyTypeEnum

async def debug_audio_models():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–µ–π."""
    
    print("üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–µ–π –≤ OpenRouter...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_gen = get_db()
    db: Session = next(db_gen)
    
    try:
        settings_service = SettingsService(db)
        user_id = 1
        openrouter_key = settings_service.get_api_key(user_id, KeyTypeEnum.OPENROUTER, decrypt=True)
        
        if not openrouter_key:
            print("‚ùå OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        manager = OpenRouterModelManager(openrouter_key)
        service = await manager.get_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
        all_models = await service.get_models()
        print(f"üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(all_models)}")
        
        # –ò—â–µ–º –º–æ–¥–µ–ª–∏ —Å –∞—É–¥–∏–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ ID
        audio_keywords = ["audio", "whisper", "speech", "voice", "tts", "transcription", "asr"]
        potential_audio_models = []
        
        print("\nüîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å –∞—É–¥–∏–æ-–∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏...")
        for model in all_models:
            model_text = f"{model.id} {model.name}".lower()
            
            for keyword in audio_keywords:
                if keyword in model_text:
                    potential_audio_models.append({
                        "id": model.id,
                        "name": model.name,
                        "input_modalities": model.input_modalities,
                        "output_modalities": model.output_modalities,
                        "architecture": model.architecture,
                        "keyword_found": keyword,
                        "category": model.get_model_category()
                    })
                    break
        
        if potential_audio_models:
            print(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(potential_audio_models)} –º–æ–¥–µ–ª–µ–π —Å –∞—É–¥–∏–æ-–∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:")
            for model in potential_audio_models:
                print(f"\n   ‚Ä¢ {model['name']} ({model['id']})")
                print(f"     –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {model['keyword_found']}")
                print(f"     Input: {model['input_modalities']}")
                print(f"     Output: {model['output_modalities']}")
                print(f"     Architecture: {model['architecture']}")
                print(f"     Category: {model['category']}")
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ —Å –∞—É–¥–∏–æ-–∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª–∏ —Å input_modalities –∏–ª–∏ output_modalities —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ audio
        print("\nüîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å –∞—É–¥–∏–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—è—Ö...")
        audio_modality_models = []
        
        for model in all_models:
            if ("audio" in model.input_modalities or 
                "audio" in model.output_modalities or
                any("audio" in str(mod).lower() for mod in model.input_modalities) or
                any("audio" in str(mod).lower() for mod in model.output_modalities)):
                audio_modality_models.append({
                    "id": model.id,
                    "name": model.name,
                    "input_modalities": model.input_modalities,
                    "output_modalities": model.output_modalities,
                    "category": model.get_model_category()
                })
        
        if audio_modality_models:
            print(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(audio_modality_models)} –º–æ–¥–µ–ª–µ–π —Å –∞—É–¥–∏–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—è—Ö:")
            for model in audio_modality_models:
                print(f"\n   ‚Ä¢ {model['name']} ({model['id']})")
                print(f"     Input: {model['input_modalities']}")
                print(f"     Output: {model['output_modalities']}")
                print(f"     Category: {model['category']}")
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ —Å –∞—É–¥–∏–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–µ–π
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –º–æ–¥–µ–ª–µ–π...")
        architecture_stats = {}
        
        for model in all_models:
            arch_modality = model.architecture.get("modality", "unknown")
            architecture_stats[arch_modality] = architecture_stats.get(arch_modality, 0) + 1
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä:")
        for arch, count in sorted(architecture_stats.items(), key=lambda x: x[1], reverse=True):
            print(f"   {arch}: {count} –º–æ–¥–µ–ª–µ–π")
            if "audio" in arch.lower():
                print(f"      ‚≠ê –°–æ–¥–µ—Ä–∂–∏—Ç 'audio'!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏
        debug_results = {
            "total_models": len(all_models),
            "potential_audio_models": potential_audio_models,
            "audio_modality_models": audio_modality_models,
            "architecture_stats": architecture_stats,
            "audio_keywords_searched": audio_keywords
        }
        
        with open("audio_models_debug.json", "w", encoding="utf-8") as f:
            json.dump(debug_results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ audio_models_debug.json")
        
        await manager.close()
        
        # –í—ã–≤–æ–¥—ã
        print("\nüìã –í—ã–≤–æ–¥—ã:")
        if potential_audio_models or audio_modality_models:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–∏")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–µ–π")
        else:
            print("‚ùå –ê—É–¥–∏–æ-–º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ OpenRouter")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤–∞—à –ø–ª–∞–Ω OpenRouter –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–∏")
            print("   2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenRouter –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
            print("   3. –í–æ–∑–º–æ–∂–Ω–æ, –∞—É–¥–∏–æ-–º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ Debug Audio Models in OpenRouter")
    print("=" * 50)
    asyncio.run(debug_audio_models())
